<?xml version="1.0" encoding="utf-8"?>
<transfer default="chunk">
  <section-def-cats>
    <!-- compound lhs's are never genitive: -->
    <def-cat n="ncmp">
      <cat-item tags="n.*.cmp"/>
      <cat-item tags="n.*.cmp.guio"/>
      <cat-item tags="np.*.cmp"/>
      <cat-item tags="np.*.cmp.guio"/>
    </def-cat>
    <def-cat n="nind">
      <cat-item tags="n.*.ind.*"/>
      <cat-item tags="n.*.ind.gen"/>
    </def-cat>
    <!-- n does not include compound lhs's: -->
    <def-cat n="n_np">
      <cat-item tags="n.*.cmp-split"/>
      <cat-item tags="n.*.def"/>
      <cat-item tags="n.*.ind"/>
      <cat-item tags="n.*.acr"/>
      <cat-item tags="n.*.sp"/>
      <cat-item tags="n.*.gen"/>
      <cat-item tags="np.*.cmp-split"/>
      <cat-item tags="np.*.gen"/>
      <cat-item tags="np.*.gen.guio"/>
      <cat-item tags="np.top"/>
      <cat-item tags="np.top.f"/>
      <cat-item tags="np.top.m"/>
      <cat-item tags="np.top.nt"/>
      <cat-item tags="np.org"/>
      <cat-item tags="np.org.f"/>
      <cat-item tags="np.org.m"/>
      <cat-item tags="np.org.nt"/>
      <cat-item tags="np.ant"/>
      <cat-item tags="np.ant.f"/>
      <cat-item tags="np.ant.m"/>
      <cat-item tags="np.ant.nt"/>
      <cat-item tags="np.cgguess"/>
      <cat-item tags="np.guess"/>
      <cat-item tags="np.cog"/>
      <cat-item tags="np.al"/>
      <cat-item tags="np.attr"/>
    </def-cat>
    <def-cat n="ngen">
      <cat-item tags="n.*.*.*.gen"/>
    </def-cat>
    <def-cat n="nind_indsplit">
      <cat-item tags="n.*.*.ind"/>
      <cat-item tags="n.*.*.ind.cmp-split"/>
    </def-cat>
    <def-cat n="ngen_time_meas">
      <cat-item tags="n.m.sg.*.gen"   lemma="liter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="liter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="centimeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="centimeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kilometer"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kilometer"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="millimeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="millimeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kubikkmeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kubikkmeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kvadratkilometer"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kvadratkilometer"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="centiliter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="centiliter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="dekaliter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="dekaliter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="dekameter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="dekameter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="desiliter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="desiliter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="desimeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="desimeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="hektoliter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="hektoliter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kilopondmeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kilopondmeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kubikkcentimeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kubikkcentimeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kubikkdesimeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kubikkdesimeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kvadratmeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kvadratmeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="løpemeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="løpemeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="milliliter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="milliliter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="nanometer"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="nanometer"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="sekundmeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="sekundmeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="spaltemillimeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="spaltemillimeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="tonnkilometer"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="tonnkilometer"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="passasjerkilometer"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="passasjerkilometer"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="rutemeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="rutemeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="meter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="meter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kilometer"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kilometer"/>

      <cat-item tags="n.*.sg.*.gen"   lemma="mil"/>
      <cat-item tags="n.*.pl.ind.gen" lemma="mil"/>
      <cat-item tags="n.*.sg.*.gen"   lemma="sjømil"/>
      <cat-item tags="n.*.pl.ind.gen" lemma="sjømil"/>
      <cat-item tags="n.*.sg.*.gen"   lemma="kvartmil"/>
      <cat-item tags="n.*.pl.ind.gen" lemma="kvartmil"/>
      <cat-item tags="n.*.sg.*.gen"   lemma="halvmil"/>
      <cat-item tags="n.*.pl.ind.gen" lemma="halvmil"/>

      <cat-item tags="n.nt.sg.*.gen"   lemma="år"/>
      <cat-item tags="n.nt.pl.ind.gen" lemma="år"/>
      <cat-item tags="n.m.sg.*.gen"    lemma="dag"/>
      <cat-item tags="n.m.pl.ind.gen"  lemma="dag"/>
      <cat-item tags="n.*.sg.*.gen"    lemma="uke"/>
      <cat-item tags="n.*.pl.ind.gen"  lemma="uke"/>
    </def-cat>
    <def-cat n="det">
      <cat-item tags="det.*"/>
    </def-cat>
    <def-cat n="detqnt">
      <cat-item tags="det.qnt.*"/>
    </def-cat>
    <def-cat n="remspc">
      <cat-item tags="sent.clb.remspc"/>
    </def-cat>
    <def-cat n="prn">
      <cat-item tags="prn.*"/>
    </def-cat>
    <def-cat n="cnjcoo_nkon">
      <cat-item tags="cnjcoo.@nkon"/>
      <cat-item tags="cnjcoo.clb.@nkon"/>
    </def-cat>
    <def-cat n="detpos">
      <cat-item tags="det.pos.*"/>
    </def-cat>
    <def-cat n="detnonpos">
      <cat-item tags="det.def.*"/>
      <cat-item tags="det.dem.*"/>
      <cat-item tags="det.emph.*"/>
      <cat-item tags="det.itg.*"/>
      <cat-item tags="det.qnt.*"/>
    </def-cat>
    <def-cat n="posgen">
      <cat-item tags="det.pos.*"/>
      <cat-item tags="n.*.gen"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="adj.*"/>
    </def-cat>
    <def-cat n="preadj-adv">
      <cat-item lemma="ikkje" tags="adv"/>
      <cat-item lemma="ikke" tags="adv"/>
      <cat-item lemma="for" tags="adv"/>
      <cat-item lemma="altfor" tags="adv"/>
      <cat-item lemma="forholdsvis" tags="adv"/>
      <cat-item lemma="forhåpentlig" tags="adv"/>
      <cat-item lemma="forholdsvis" tags="adv"/>
      <cat-item lemma="hvor" tags="adv"/>
      <cat-item lemma="kor" tags="adv"/>
      <cat-item lemma="kanon" tags="adv"/>
      <cat-item lemma="sørpe" tags="adv"/>
      <cat-item lemma="bom" tags="adv"/>
      <cat-item lemma="dønn" tags="adv"/>
      <cat-item lemma="eitrende" tags="adv"/>
      <cat-item lemma="forhakkende" tags="adv"/>
      <cat-item lemma="fullstendig" tags="adv"/>
      <cat-item lemma="delvis" tags="adv"/>
    </def-cat>
    <def-cat n="adjind">
      <cat-item tags="adj.*.ind"/>
      <cat-item tags="adj.*.pl"/>
      <cat-item tags="adj.comp.*"/>
      <cat-item tags="adj.sint.comp.*"/>
      <cat-item tags="adj.pprs"/>                              <!--hvor truende-->
    </def-cat>
    <def-cat n="adv">
      <cat-item tags="adv"/>
    </def-cat>
    <def-cat n="cm">
      <cat-item tags="cm"/>
    </def-cat>
    <def-cat n="cnjsub-at">
      <cat-item lemma="at" tags="cnjsub"/>
    </def-cat>
    <def-cat n="infm">
      <cat-item lemma="å" tags="part"/>
    </def-cat>
    <def-cat n="ha">
      <cat-item tags="vbhaver.inf.actv"/>
      <cat-item lemma="ha" tags="vblex.inf.actv"/>
    </def-cat>
    <def-cat n="vblex_bli">
      <cat-item lemma="bli" tags="vblex.*"/>
      <cat-item lemma="verte" tags="vblex.*"/>
    </def-cat>
    <def-cat n="sin">
      <cat-item lemma="seg" tags="det.pos.*"/>
    </def-cat>
    <def-cat n="måte">
      <cat-item lemma="måte" tags="n.m.sg.ind"/>
    </def-cat>
    <def-cat n="verb">
      <cat-item tags="vblex.*"/>
      <cat-item tags="vbser.*"/>
      <cat-item tags="vbhaver.*"/>
      <cat-item tags="vbmod.*"/>
      <cat-item tags="vaux.*"/>
    </def-cat>
    <def-cat n="verbpp">
      <cat-item tags="vblex.pp"/>
      <cat-item tags="vbser.pp"/>
      <cat-item tags="vaux.pp"/>
      <cat-item tags="vbhaver.pp"/>
      <cat-item tags="vbmod.pp"/>
    </def-cat>
    <def-cat n="vblexinf">
      <cat-item tags="vblex.inf"/>
    </def-cat>
    <def-cat n="vblexpp">
      <cat-item tags="vblex.pp"/>
    </def-cat>
    <def-cat n="vblexinf_or_infpass">
      <cat-item tags="vblex.inf"/>
      <cat-item tags="vblex.inf.pasv"/>
    </def-cat>
    <def-cat n="vblexinfpass">
      <cat-item tags="vblex.inf.pasv"/>
    </def-cat>
    <def-cat n="verbpass">
      <cat-item tags="vblex.*.pasv"/>
      <cat-item tags="vbser.*.pasv"/>
      <cat-item tags="vaux.*.pasv"/>
      <cat-item tags="vbhaver.*.pasv"/>
      <cat-item tags="vbmod.*.pasv"/>
    </def-cat>
  </section-def-cats>
  <section-def-attrs>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="n.acr"/>
      <attr-item tags="np"/>
    </def-attr>
    <def-attr n="persona">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="vblex"/>
      <attr-item tags="vblex.pstv"/>
      <attr-item tags="vbser"/>
      <attr-item tags="vbhaver"/>
      <attr-item tags="vbmod"/>
      <attr-item tags="vaux"/>
    </def-attr>
    <def-attr n="temps">
      <attr-item tags="inf"/>
      <attr-item tags="imp"/>
      <attr-item tags="pres"/>
      <attr-item tags="past"/>
      <attr-item tags="pp"/>
      <attr-item tags="supn"/>
    </def-attr>
    <def-attr n="voice">
      <attr-item tags="pasv"/>
      <attr-item tags="actv"/>
      <attr-item tags="VD"/>
    </def-attr>
    <def-attr n="a_remspc">
      <attr-item tags="remspc"/>
    </def-attr>
    <def-attr n="a_det">
      <attr-item tags="det"/>
      <attr-item tags="det.emph"/>
      <attr-item tags="det.dem"/>
      <attr-item tags="det.itg"/>
      <attr-item tags="det.qnt"/>
      <attr-item tags="det.qnt.neg"/>
      <attr-item tags="det.pos"/>
    </def-attr>
    <def-attr n="a_date">
      <attr-item tags="date"/>
    </def-attr>

    <def-attr n="a_adj">
      <attr-item tags="adj"/>
      <attr-item tags="adj.pp"/>
      <attr-item tags="adj.pprs"/>
      <attr-item tags="adj.ord"/>
      <attr-item tags="adj.sint"/>
    </def-attr>

    <def-attr n="grau">
      <attr-item tags="pst"/>
      <attr-item tags="comp"/>
      <attr-item tags="sup"/>
    </def-attr>

    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="mf"/>
      <attr-item tags="nt"/>
      <attr-item tags="fn"/>
      <attr-item tags="f"/>
      <attr-item tags="ut"/>
      <attr-item tags="un"/>
      <attr-item tags="GD"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
      <attr-item tags="sp"/>
      <attr-item tags="ND"/>
    </def-attr>
    <def-attr n="cas">
      <attr-item tags="nom"/>
      <attr-item tags="gen"/>
      <attr-item tags="acc"/>
      <attr-item tags="CD"/>
    </def-attr>
    <def-attr n="AD">
      <attr-item tags="AD"/>
    </def-attr>
    <def-attr n="art">
      <attr-item tags="def"/>
      <attr-item tags="ind"/>
    </def-attr>
    <def-attr n="a_cmp">
      <attr-item tags="cmp"/>
      <attr-item tags="cmp-split"/>
    </def-attr>
    <def-attr n="cmp-split">
      <attr-item tags="cmp-split"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="gen-prep"/>
    <def-var n="caseFirstWord"/>
    <def-var n="caseSecondWord"/>
    <def-var n="c_name"         c="chunk name"/>
    <def-var n="c_tags"         c="chunk tags"/>
    <def-var n="ntags"/>
    <def-var n="aux"/>
    <def-var n="defnes"/>
    <def-var n="gender"/>
    <def-var n="grau_aux"       c="lexical unit containing meir/mest if translating from sint to non-sint"/>
  </section-def-vars>

  <section-def-lists>
    <!-- POSSESSED-DEPENDENT EXCEPTIONS TODO: omkretsen til verda,
         lengden på dokumentet, ryktet til styret, lukta av/etter
         kua... (although this could be coded in all the dictionaries,
         or added by CG, it's probably simpler and more compact to do
         it with def-list and macros)

         TODO: find real examples for nob→swe; and let t2x revert to
         genitive (not sin/garpe) if there is no following possessed
    -->
    <def-list n="gen-i">
      <list-item v="TODO"/>
    </def-list>
    <def-list n="gen-på">
      <list-item v="TODO"/>
    </def-list>
    <def-list n="gen-av">
      <list-item v="TODO"/>
    </def-list>

    <def-list n="det_indef">
      <!-- feels like these should have their own
           sub-pos... «<det><dem> som kan ha <ind> etter seg på
           bokmål» -->
      <list-item v="denne"/>
      <list-item v="disse"/>
      <list-item v="dette"/>
      <list-item v="den"/>
      <list-item v="de"/>
    </def-list>

    <def-list n="vere_pass"
              c="Verbs which require vere instead of bli/verte.">
      <list-item v="vite"/>
      <list-item v="eige"/>
    </def-list>

    <def-list n="adj-genders" c="possible swe adj genders">
      <list-item v="&lt;fn&gt;"/>
      <list-item v="&lt;m&gt;"/>
      <list-item v="&lt;ut&gt;"/>
      <list-item v="&lt;nt&gt;"/>
      <list-item v="&lt;un&gt;"/>
    </def-list>
    <def-list n="adj-sg-ind-genders" c="possible swe adj genders for sg ind forms">
      <list-item v="&lt;ut&gt;"/>
      <list-item v="&lt;nt&gt;"/>
    </def-list>

    <def-list n="noun-use-masc-adj" c="nouns for which we use the 'm' form of adj's (tl/swe lemmas)">
      <list-item v="befälhavare"/>
      <list-item v="beskyddare"/>
      <list-item v="chef"/>
      <list-item v="domare"/>
      <list-item v="företrädare"/>
      <list-item v="Gud"/>
      <list-item v="gud"/>
      <list-item v="gudom"/>
      <list-item v="hövding"/>
      <list-item v="ledare"/>
      <list-item v="makthavare"/>
      <list-item v="man"/>
      <list-item v="polischef"/>
      <list-item v="representant"/>
      <list-item v="rådgivare"/>
      <list-item v="vårdare"/>
      <list-item v="ämbetsman"/>
      <list-item v="överlevande"/>
    </def-list>

    <def-list n="verb-keep-periphrastic" c="don't turn into s-passives for these
                                            We currently turn vblex.pp→supn into s-passive after vara¹/bli.
                                            We could just deal with this in nob.rlx, selecting adj.pp where we don't want s-passive?
                                            (Could that mess up nno / do we ever want uninflected vblex.pp in nno where swe wants periphrastic or vice versa?)
                                            TODO: also include all lemmas that cannot generate pasv">
      <list-item v="stressa"/>
      <list-item v="ackreditera"/>
      <list-item v="akta"/>
      <list-item v="animera"/>
      <list-item v="anknyta"/>
      <list-item v="anpassa"/>
      <list-item v="ansluta"/>
      <list-item v="anstränga"/>
      <list-item v="ansätta"/>
      <list-item v="arbeta"/>
      <list-item v="argumentera"/>
      <list-item v="armera"/>
      <list-item v="asfaltera"/>
      <list-item v="aspirera"/>
      <list-item v="automatisera"/>
      <list-item v="avancera"/>
      <list-item v="avgiftsbelägga"/>
      <list-item v="avklara"/>
      <list-item v="avlida"/>
      <list-item v="avlöna"/>
      <list-item v="avpassa"/>
      <list-item v="avskräcka"/>
      <list-item v="avsky"/>
      <list-item v="avskära"/>
      <list-item v="avspärra"/>
      <list-item v="avstänga"/>
      <list-item v="avtrubba"/>
      <list-item v="avväga"/>
      <list-item v="bannlysa"/>
      <list-item v="bedra"/>
      <list-item v="bedröva"/>
      <list-item v="befolka"/>
      <list-item v="begråta"/>
      <list-item v="beklä"/>
      <list-item v="belasta"/>
      <list-item v="belägga"/>
      <list-item v="bemanna"/>
      <list-item v="bereda"/>
      <list-item v="bero"/>
      <list-item v="berusa"/>
      <list-item v="berättiga"/>
      <list-item v="berömma"/>
      <list-item v="besjäla"/>
      <list-item v="bespruta"/>
      <list-item v="bestjäla"/>
      <list-item v="betinga"/>
      <list-item v="betro"/>
      <list-item v="betyda"/>
      <list-item v="betäcka"/>
      <list-item v="bevara"/>
      <list-item v="beväpna"/>
      <list-item v="bidra"/>
      <list-item v="binda"/>
      <list-item v="bleka"/>
      <list-item v="bortse"/>
      <list-item v="bortta"/>
      <list-item v="bre"/>
      <list-item v="brinna"/>
      <list-item v="bräcka"/>
      <list-item v="börja"/>
      <list-item v="censurera"/>
      <list-item v="centra"/>
      <list-item v="decentralisera"/>
      <list-item v="dedicera"/>
      <list-item v="demilitarisera"/>
      <list-item v="differentiera"/>
      <list-item v="dikta"/>
      <list-item v="dimensionera"/>
      <list-item v="domesticera"/>
      <list-item v="drunkna"/>
      <list-item v="efterlysa"/>
      <list-item v="eftersätta"/>
      <list-item v="eftertrakta"/>
      <list-item v="elektrifiera"/>
      <list-item v="emigrera"/>
      <list-item v="etsa"/>
      <list-item v="fabricera"/>
      <list-item v="falla"/>
      <list-item v="fastlägga"/>
      <list-item v="finfördela"/>
      <list-item v="fixa"/>
      <list-item v="fly"/>
      <list-item v="folkbokföra"/>
      <list-item v="fortsätta"/>
      <list-item v="freda"/>
      <list-item v="fridlysa"/>
      <list-item v="frukta"/>
      <list-item v="frälsa"/>
      <list-item v="frånse"/>
      <list-item v="frånskilja"/>
      <list-item v="färdigbygga"/>
      <list-item v="färga"/>
      <list-item v="fåra"/>
      <list-item v="förankra"/>
      <list-item v="förbehålla"/>
      <list-item v="förbinda"/>
      <list-item v="förblinda"/>
      <list-item v="fördra"/>
      <list-item v="förfalska"/>
      <list-item v="förflyta"/>
      <list-item v="förgylla"/>
      <list-item v="förhöja"/>
      <list-item v="förkomma"/>
      <list-item v="förlåta"/>
      <list-item v="förmildra"/>
      <list-item v="förminska"/>
      <list-item v="förorena"/>
      <list-item v="förplikta"/>
      <list-item v="förpliktiga"/>
      <list-item v="förskona"/>
      <list-item v="förskräcka"/>
      <list-item v="försvinna"/>
      <list-item v="förtjusa"/>
      <list-item v="förutbestämma"/>
      <list-item v="förvirra"/>
      <list-item v="förvåna"/>
      <list-item v="generalisera"/>
      <list-item v="genomarbeta"/>
      <list-item v="gifta"/>
      <list-item v="glasera"/>
      <list-item v="gratinera"/>
      <list-item v="gröpa ur"/>
      <list-item v="guida"/>
      <list-item v="gälda"/>
      <list-item v="gälla"/>
      <list-item v="gå"/>
      <list-item v="hamna"/>
      <list-item v="haverera"/>
      <list-item v="hyvla"/>
      <list-item v="hänvisa"/>
      <list-item v="hölja"/>
      <list-item v="idealisera"/>
      <list-item v="improvisera"/>
      <list-item v="indela"/>
      <list-item v="infektera"/>
      <list-item v="inhysa"/>
      <list-item v="inkapsla"/>
      <list-item v="inlära"/>
      <list-item v="innehålla"/>
      <list-item v="inrikta"/>
      <list-item v="inspela"/>
      <list-item v="intressera"/>
      <list-item v="inträffa"/>
      <list-item v="invalidisera"/>
      <list-item v="invandra"/>
      <list-item v="invertera"/>
      <list-item v="involvera"/>
      <list-item v="irritera"/>
      <list-item v="isolera"/>
      <list-item v="kamouflera"/>
      <list-item v="kantra"/>
      <list-item v="klarlägga"/>
      <list-item v="klä"/>
      <list-item v="klå"/>
      <list-item v="knyta"/>
      <list-item v="kolla"/>
      <list-item v="komma"/>
      <list-item v="komma ihåg"/>
      <list-item v="kommunalisera"/>
      <list-item v="komplicera"/>
      <list-item v="komponera"/>
      <list-item v="konkurrensutsätta"/>
      <list-item v="korka"/>
      <list-item v="korrelera"/>
      <list-item v="korrumpera"/>
      <list-item v="kriminalisera"/>
      <list-item v="kupa"/>
      <list-item v="kupera"/>
      <list-item v="kvalificera"/>
      <list-item v="kväda"/>
      <list-item v="känna"/>
      <list-item v="labialisera"/>
      <list-item v="laminera"/>
      <list-item v="landa"/>
      <list-item v="legitimera"/>
      <list-item v="leta"/>
      <list-item v="leva"/>
      <list-item v="licensiera"/>
      <list-item v="liera"/>
      <list-item v="linda"/>
      <list-item v="linjera"/>
      <list-item v="ljudisolera"/>
      <list-item v="läka"/>
      <list-item v="lämpa"/>
      <list-item v="låsa"/>
      <list-item v="maskera"/>
      <list-item v="militarisera"/>
      <list-item v="missleda"/>
      <list-item v="mjölka"/>
      <list-item v="mobba"/>
      <list-item v="mäta ut"/>
      <list-item v="måla"/>
      <list-item v="möblera"/>
      <list-item v="nedgräva"/>
      <list-item v="nedlägga"/>
      <list-item v="negligera"/>
      <list-item v="nerlägga"/>
      <list-item v="normera"/>
      <list-item v="numrera"/>
      <list-item v="nyansera"/>
      <list-item v="närma"/>
      <list-item v="omkomma"/>
      <list-item v="omskriva"/>
      <list-item v="omvända"/>
      <list-item v="omyndigförklara"/>
      <list-item v="orientera"/>
      <list-item v="paketera"/>
      <list-item v="perforera"/>
      <list-item v="pervertera"/>
      <list-item v="politisera"/>
      <list-item v="predestinera"/>
      <list-item v="privilegiera"/>
      <list-item v="projektera"/>
      <list-item v="proportionera"/>
      <list-item v="prospektera"/>
      <list-item v="provocera"/>
      <list-item v="pränta"/>
      <list-item v="putsa"/>
      <list-item v="relatera"/>
      <list-item v="renodla"/>
      <list-item v="rentvå"/>
      <list-item v="repa upp"/>
      <list-item v="reservera"/>
      <list-item v="revetera"/>
      <list-item v="rigga"/>
      <list-item v="rimma"/>
      <list-item v="rista"/>
      <list-item v="roa"/>
      <list-item v="ruinera"/>
      <list-item v="runda"/>
      <list-item v="räffla"/>
      <list-item v="rättfärdiga"/>
      <list-item v="röka"/>
      <list-item v="sabba"/>
      <list-item v="sammanbinda"/>
      <list-item v="sammankoppla"/>
      <list-item v="sammanlänka"/>
      <list-item v="sammansätta"/>
      <list-item v="sekularisera"/>
      <list-item v="signera"/>
      <list-item v="skaffa"/>
      <list-item v="ske"/>
      <list-item v="skissa"/>
      <list-item v="sko"/>
      <list-item v="sky"/>
      <list-item v="slarva"/>
      <list-item v="sluka"/>
      <list-item v="smickra"/>
      <list-item v="snappa"/>
      <list-item v="snida"/>
      <list-item v="specialisera"/>
      <list-item v="spetsa"/>
      <list-item v="standardisera"/>
      <list-item v="stilisera"/>
      <list-item v="strecka"/>
      <list-item v="strö"/>
      <list-item v="subventionera"/>
      <list-item v="svara"/>
      <list-item v="svartlista"/>
      <list-item v="svetsa"/>
      <list-item v="svika"/>
      <list-item v="svälta"/>
      <list-item v="syfta"/>
      <list-item v="sysselsätta"/>
      <list-item v="säkerställa"/>
      <list-item v="särskilja"/>
      <list-item v="sätta samman"/>
      <list-item v="tabubelägga"/>
      <list-item v="teckna"/>
      <list-item v="temperera"/>
      <list-item v="tillhöra"/>
      <list-item v="tillkomma"/>
      <list-item v="tillta"/>
      <list-item v="tillyxa"/>
      <list-item v="timra"/>
      <list-item v="tjäna"/>
      <list-item v="tjänstgöra"/>
      <list-item v="trakta"/>
      <list-item v="tudela"/>
      <list-item v="tycka om"/>
      <list-item v="tynga"/>
      <list-item v="tystna"/>
      <list-item v="täcka"/>
      <list-item v="tänka"/>
      <list-item v="underordna"/>
      <list-item v="uppbygga"/>
      <list-item v="uppdela"/>
      <list-item v="uppkalla"/>
      <list-item v="upplysa"/>
      <list-item v="uppodla"/>
      <list-item v="uppresa"/>
      <list-item v="uppstå"/>
      <list-item v="uppväxa"/>
      <list-item v="urbanisera"/>
      <list-item v="utbre"/>
      <list-item v="utebli"/>
      <list-item v="utgå"/>
      <list-item v="utlägga"/>
      <list-item v="utmatta"/>
      <list-item v="utmejsla"/>
      <list-item v="utplacera"/>
      <list-item v="utradera"/>
      <list-item v="utrusta"/>
      <list-item v="utsira"/>
      <list-item v="utsmycka"/>
      <list-item v="utställa"/>
      <list-item v="utstöta"/>
      <list-item v="utsöka"/>
      <list-item v="utvandra"/>
      <list-item v="utvälja"/>
      <list-item v="vakna"/>
      <list-item v="vandra"/>
      <list-item v="varda"/>
      <list-item v="variera"/>
      <list-item v="varna"/>
      <list-item v="verka"/>
      <list-item v="vingklippa"/>
      <list-item v="vinkla"/>
      <list-item v="vitalisera"/>
      <list-item v="välva"/>
      <list-item v="vänja"/>
      <list-item v="väpna"/>
      <list-item v="väsa"/>
      <list-item v="växa"/>
      <list-item v="ympa"/>
      <list-item v="yxa till"/>
      <list-item v="älska"/>
      <list-item v="ämna"/>
      <list-item v="ånga"/>
      <list-item v="återuppstå"/>
      <list-item v="återvända"/>
      <list-item v="åtskilja"/>
      <list-item v="ösa"/>
      <list-item v="överdriva"/>
      <list-item v="överlappa"/>
      <list-item v="överleva"/>
      <list-item v="överlista"/>
      <list-item v="överlägga"/>
      <list-item v="överordna"/>
      <list-item v="översålla"/>
      <list-item v="övertyga"/>
      <list-item v="övertäcka"/>
      <list-item v="överväldiga"/>
      <list-item v="övervärdera"/>
    </def-list>
  </section-def-lists>

  <section-def-macros>
    <def-macro n="set_ntags" npar="1"
               c="arg.1: (proper) noun. Puts tags of noun in ntags (for use as chunk tags).">
      <let><var n="ntags"/><clip pos="1" side="tl" part="tags"/></let>
    </def-macro>

    <def-macro n="stash_case_in_ntags" npar="1"
               c="arg.1: noun. Puts tags of noun in ntags (for use as chunk tags), removes case from the word.">
      <let><var n="ntags"/><clip pos="1" side="tl" part="tags"/></let>
    </def-macro>

    <def-macro n="switch_cases" npar="2">
      <choose>
        <when>
          <test><not>
            <and>
              <equal><clip pos="2" side="tl" part="lemh"/><lit v="De"/></equal>
              <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.pos"/></equal>
              <equal><clip pos="2" side="tl" part="persona"/><lit-tag v="p2"/></equal>
            </and>
          </not></test>
          <let><var n="caseFirstWord"/><get-case-from pos="1"><clip pos="1" side="tl" part="lemh"/></get-case-from></let>
          <let><clip pos="1" side="tl" part="lemh"/><get-case-from pos="2"><clip pos="1" side="tl" part="lemh"/></get-case-from></let>
          <modify-case><clip pos="2" side="tl" part="lemh"/><var n="caseFirstWord"/></modify-case>
        </when>
      </choose>
    </def-macro>

    <def-macro n="set_caseFirstWord" npar="1"
               c="Downcases the argument, unless np">
      <!-- TODO: Put a marker for acronyms where we don't want to copy case from them; then drop the tag -->
      <let><var n="caseFirstWord"/><get-case-from pos="1"><lit v="aa"/></get-case-from></let>
      <choose><when>
        <test><not><equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></equal></not></test>
        <modify-case><clip pos="1" side="tl" part="lemh"/><lit v="aa"/></modify-case>
      </when></choose>
    </def-macro>

    <def-macro n="set_caseFirstWord2" npar="2"
               c="arg1: first word, arg2: second word
                  Downcases arg1, unless np">
      <let><var n="caseFirstWord"/><get-case-from pos="1"><lit v="aa"/></get-case-from></let>
      <let><var n="caseSecondWord"/><get-case-from pos="2"><lit v="aa"/></get-case-from></let>
      <choose><when>
        <test><and>
          <equal><var n="caseFirstWord"/><lit v="AA"/></equal>
          <not><equal><var n="caseSecondWord"/><lit v="AA"/></equal></not>
        </and></test>
        <let><var n="caseFirstWord"/><lit v="Aa"/></let> <!-- avoid applying shouting to whole chunk if only first word shouts -->
      </when></choose>
      <choose><when>
        <test><not><equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></equal></not></test>
        <modify-case><clip pos="1" side="tl" part="lemh"/><lit v="aa"/></modify-case>
      </when></choose>
    </def-macro>

    <!-- Macros which set concordance variables: -->
    <def-macro n="set_gender1.adj" npar="1"
               c="arg.1: adj
                  GD/ND only used when dan is un.sp.def, so un.pl fine for pst">
      <choose><when>
        <test><and>
          <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="pst"/></equal>
          <or>
            <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="ND"/></equal>
            <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="GD"/></equal>
          </or>
        </and></test>
        <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></let>
        <let><clip pos="1" side="tl" part="gen"/><lit-tag v="un"/></let>
      </when></choose>
      <choose><when>
        <test><and>
          <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="sup"/></equal>
          <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="GD"/></equal>
        </and></test>
        <let><clip pos="1" side="tl" part="gen"/><lit-tag v="m"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="set_gender2.n.adj" npar="2"
               c="arg.1: noun, arg.2: adjective
                  In Swedish, 'adj.m' is only used on a subset of masc nouns, see noun-use-masc-adj.
                  Only take noun gender if adj is GD, or if noun has changed gender.
                  (We want to allow 'helt.nt svart.mf katt.m', no gender change nor GD on 'helt',
                  but o/w make sure adj corresponds: 'helt.nt forfatterskap => hel.ut forfattarskap')">
      <choose><when c="The 'un' gender is only on taggings that never have other possibilities.
                       also, be conservative: only set gender if sl→tl changed gender, or we have a GD">
        <test><and>
          <not><equal><clip pos="2" side="tl" part="gen"/><lit-tag v="un"/></equal></not>
          <or>
            <equal><clip pos="2" side="tl" part="gen"/><lit-tag v="GD"/></equal>
            <not><equal><clip pos="1" side="sl" part="gen"/><clip pos="1" side="tl" part="gen"/></equal></not>
          </or>
        </and></test>

        <choose>
          <when>
            <test><and>
              <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
              <equal><clip pos="2" side="tl" part="art"/><lit-tag v="ind"/></equal>
              <!-- första is fn/m when sg-ind -->
              <not><equal caseless="yes"><clip pos="2" side="tl" part="lemh"/><lit v="första"/></equal></not>
              <in><clip pos="1" side="tl" part="gen"/><list n="adj-sg-ind-genders"/></in>
            </and></test>
            <let><clip pos="2" side="tl" part="gen"/><clip pos="1" side="tl" part="gen"/></let>
          </when>
        </choose>

        <choose>
          <when>
            <test><and>
              <or>
                <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
                <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="sp"/></equal>
              </or>
              <or>
                <equal><clip pos="2" side="tl" part="art"/><lit-tag v="def"/></equal>
                <equal><clip pos="2" side="tl" part="lemh"/><lit v="första"/></equal>
              </or>
            </and></test>
            <choose><when>
              <test><and>
                <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="ut"/></equal>
                <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="noun-use-masc-adj"/></in>
              </and></test>
              <let><clip pos="2" side="tl" part="gen"/><lit-tag v="m"/></let>
            </when></choose>
            <choose><when>
              <test><equal><clip pos="1" side="tl" part="gen"/><lit-tag v="nt"/></equal></test>
              <let><clip pos="2" side="tl" part="gen"/><lit-tag v="fn"/></let>
            </when></choose>
          </when>
        </choose>

      </when></choose>
      <!-- In case the above didn't help: -->
      <call-macro n="set_gender1.adj"><with-param pos="2"/></call-macro>
      <!-- Postchunk might make n def if adj def – we don't do that here though. -->
    </def-macro>

    <def-macro n="set_grau_aux1" npar="1"
               c="arg.1: adjective
                  When translating from sint to non-sint, put «meir/mest» in grau_aux-variable.

                  Assumes c_name has been set!">
      <choose>
        <when>
          <test><and>
            <equal><clip pos="1" side="sl" part="a_adj"/><lit-tag v="adj.sint"/></equal>
            <not><equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj.sint"/></equal></not>
            <or>
              <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="comp"/></equal>
              <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="sup"/></equal>
            </or>
          </and></test>

          <let>
            <var n="grau_aux"/>
            <concat>
              <lit v="^mycket"/>
              <lit-tag v="adv"/>
              <clip pos="1" side="tl" part="grau"/>
              <lit v="$ "/>
            </concat>
          </let>

          <let>
            <var n="c_name"/>
            <concat>
              <lit v="adj_"/>
              <var n="c_name"/>
            </concat>
          </let>

          <let>
            <clip pos="1" side="tl" part="tags"/>
            <lit-tag v="adj.pst.un.pl.ind"/>
          </let>
        </when>

        <otherwise>
          <let>
            <var n="grau_aux"/><lit v=""/>
          </let>
        </otherwise>

      </choose>
    </def-macro>

    <def-macro n="set_grau_aux2" npar="2"
               c="arg.1: adjective arg.2: adjective (in order of appearance)
                  When translating from «meir/mest» non-sint to sint, remove «meir/mest», empty grau_aux-variable.
                  When translating from (first arg) sint to non-sint, put «meir/mest» in grau_aux-variable.

                  Assumes c_name has been set!">
      <choose>
        <when c="mest moderne→modernaste (removing mest/meir)">
          <test><and>
            <equal caseless="yes"><clip pos="1" side="tl" part="lemh"/><lit v="mycken"/></equal>
            <or>
              <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="comp"/></equal>
              <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="sup"/></equal>
            </or>
            <not><equal><clip pos="2" side="sl" part="a_adj"/><lit-tag v="adj.sint"/></equal></not>
            <equal><clip pos="2" side="tl" part="a_adj"/><lit-tag v="adj.sint"/></equal>
          </and></test>
          <!-- The second adj is synthetic, so copy tags (except defnes) from first adj: -->
          <let><var n="defnes"/><clip pos="2" side="tl" part="art"/></let>
          <let><var n="gender"/><clip pos="2" side="tl" part="gen"/></let>
          <let><clip pos="2" side="tl" part="tags"/><clip pos="1" side="tl" part="tags"/></let>
          <let><clip pos="2" side="tl" part="art"/><var n="defnes"/></let>
          <choose>
            <when>
              <test><equal><clip pos="2" side="tl" part="art"/><lit-tag v="ind"/></equal></test>
              <let><clip pos="2" side="tl" part="art"/><lit-tag v="def"/></let>
            </when>
          </choose>
          <choose>
            <when>
              <test><equal><var n="gender"/><lit-tag v="m"/></equal></test>
              <let><clip pos="2" side="tl" part="gen"/><lit-tag v="m"/></let>
            </when>
            <when>
              <test><equal><clip pos="2" side="tl" part="grau"/><lit-tag v="comp"/></equal></test>
              <let><clip pos="2" side="tl" part="gen"/><lit-tag v="un"/></let>
            </when>
            <otherwise>
              <let><clip pos="2" side="tl" part="gen"/><lit-tag v="fn"/></let>
            </otherwise>
          </choose>
          <!-- And delete the first (meir/mest) adj: -->
          <let><clip pos="1" side="tl" part="whole"/><lit v=""/></let>
          <let><var n="grau_aux"/><lit v=""/></let>
        </when>

        <otherwise c="betydeligste → mest betydelige (adding mest/meir)">
          <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
          <!-- and fix tags on the second adj (but no new aux if only second adj is non-pst; TODO better) -->
          <choose><when>
            <test><and>
              <equal><clip pos="2" side="sl" part="a_adj"/><lit-tag v="adj.sint"/></equal>
              <not><equal><clip pos="2" side="tl" part="a_adj"/><lit-tag v="adj.sint"/></equal></not>
              <or>
                <equal><clip pos="2" side="tl" part="grau"/><lit-tag v="comp"/></equal>
                <equal><clip pos="2" side="tl" part="grau"/><lit-tag v="sup"/></equal>
              </or>
            </and></test>
            <let>
              <clip pos="2" side="tl" part="tags"/>
              <lit-tag v="adj.pst.un.pl.ind"/>
            </let>
          </when></choose>
        </otherwise>
      </choose>
    </def-macro>

    <def-macro n="set_voice" npar="1"
               c="arg.1: main/content verb">
      <choose><when>
        <test><equal><clip pos="1" side="tl" part="voice"/><lit-tag v="VD"/></equal></test>
        <let><clip pos="1" side="tl" part="voice"/><lit-tag v="actv"/></let>
      </when></choose>
    </def-macro>

    <!-- Output macros: -->
    <def-macro n="out_gen-prep" npar="1"
               c="arg.1: noun. Only acts on genitives. Adds a space after.">
      <let><var n="gen-prep"/><lit v=""/></let>
      <choose><when>
        <test><equal><clip pos="1" side="sl" part="cas"/><lit-tag v="gen"/></equal></test>
        <choose>
          <when><test><in><clip pos="1" side="tl" part="lemh"/><list n="gen-i"/></in></test>
          <let><var n="gen-prep"/><lit v="i"/></let></when>
          <when><test><in><clip pos="1" side="tl" part="lemh"/><list n="gen-på"/></in></test>
          <let><var n="gen-prep"/><lit v="på"/></let></when>
          <when><test><in><clip pos="1" side="tl" part="lemh"/><list n="gen-av"/></in></test>
          <let><var n="gen-prep"/><lit v="av"/></let></when>
        </choose>
        <choose>
          <when><test><not><equal><var n="gen-prep"/><lit v=""/></equal></not></test>
          <out>
            <chunk name="gen-prep">
              <tags><tag><lit-tag v="pr"/></tag></tags>
              <lu>
                <var n="gen-prep"/>
                <lit-tag v="pr"/>
              </lu>
            </chunk>
            <b/>
          </out>
          <let><clip pos="1" side="tl" part="cas"/><lit v=""/></let>
        </when></choose>
      </when></choose>
    </def-macro>

    <def-macro n="out_verb" npar="1"
               c="arg.1: verb">
      <call-macro n="set_voice"><with-param pos="1"/></call-macro>

      <let><var n="c_name"/><lit v="verb"/></let>
      <let><var n="c_tags"/><clip pos="1" side="tl" part="tags"/></let>
      <choose><when>
        <test><or>
          <equal><clip pos="1" side="tl" part="lemh"/><lit v="bli"/></equal>
          <equal><clip pos="1" side="tl" part="lemh"/><lit v="vara"/></equal>
          <equal><clip pos="1" side="tl" part="lemh"/><lit v="vara¹"/></equal>
          <equal><clip pos="1" side="tl" part="lemh"/><lit v="ha"/></equal>
        </or></test>
        <let><var n="c_name"/><lit v="aux"/></let>
        <append n="c_tags"><concat><lit v="&lt;"/><clip pos="1" side="tl" part="lemh"/><lit v="&gt;"/></concat></append>
      </when></choose>
      <choose><when>
        <test><and>
          <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="verb-keep-periphrastic"/></in>
          <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="supn"/></equal>
          <equal><clip pos="1" side="tl" part="voice"/><lit-tag v="actv"/></equal>
        </and></test>
        <let><var n="c_tags"/><lit-tag v="adj.pp.nt.sg.ind"/></let>
      </when></choose>
      <out>
        <chunk namefrom="c_name" case="caseFirstWord">
          <tags><tag><var n="c_tags"/></tag></tags>
          <lu>
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_verb"/>
            <clip pos="1" side="tl" part="temps"/>
            <clip pos="1" side="tl" part="voice"/>
            <clip pos="1" side="tl" part="lemq"/>
          </lu>
        </chunk>
      </out>
    </def-macro>
  </section-def-macros>



  <section-rules>
    <!-- Verbs -->

    <rule comment="VBLEX">
      <pattern>
        <pattern-item n="verb"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_verb"><with-param pos="1"/></call-macro>
      </action>
    </rule>

    <rule comment="BLITT VBLEXPP">
      <pattern>
        <pattern-item n="vblex_bli"/>
        <pattern-item n="vblexpp"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <choose>
          <when>
            <test><equal><clip pos="2" side="tl" part="voice"/><lit-tag v="VD"/></equal></test>
            <let><clip pos="2" side="tl" part="voice"/><lit-tag v="pasv"/></let>
            <call-macro n="out_verb"><with-param pos="2"/></call-macro>
          </when>
          <otherwise>
            <call-macro n="out_verb"><with-param pos="1"/></call-macro>
            <out><b pos="1"/></out>
            <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
            <call-macro n="out_verb"><with-param pos="2"/></call-macro>
          </otherwise>
        </choose>
      </action>
    </rule>

    <rule comment="PASV at ha PP: Menes at have dræbt → Tros ha dödat">
      <pattern>
        <pattern-item n="verbpass"/>
        <pattern-item n="cnjsub-at"/>
        <pattern-item n="ha"/>
        <pattern-item n="verbpp"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <let><var n="c_name"/><lit v="verb"/></let>
        <choose><when>
          <test><or>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="bli"/></equal>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="vara"/></equal>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="vara¹"/></equal>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="ha"/></equal>
          </or></test>
          <let><var n="c_name"/><lit v="aux"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
          <b pos="1"/>
          <b pos="2"/>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="3" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
          </chunk>
          <b pos="3"/>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="4" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="INFM">
      <pattern>
        <pattern-item n="infm"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="infm" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="tl" part="tags"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADV">
      <pattern>
        <pattern-item n="adv"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="tl" part="tags"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <!-- Catch wrong bracketing:  -->
    <rule comment="preadj-ADV ADJIND
                   Ikkje: «altså kvinnelig [vektløfting]»">
      <pattern>
        <pattern-item n="preadj-adv"/>
        <pattern-item n="adjind"/>
      </pattern>
      <action>
        <!-- c_name setting after set_grau_aux since adv first in chunk -->
        <call-macro n="set_gender1.adj"><with-param pos="2"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>

        <choose>
          <when>
            <test>
              <not><equal><var n="grau_aux"/><lit v=""/></equal></not>
            </test>
            <let><var n="c_name"/><lit v="adv_adj_adj"/></let>
          </when>
          <otherwise>
            <let><var n="c_name"/><lit v="adv_adj"/></let>
          </otherwise>
        </choose>

        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="2" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
            <b pos="1"/>
            <var n="grau_aux"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="tags"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- Nouns -->

    <!-- noun exceptions: -->
    <rule comment="NGEN_TIME_MEAS: dagens => dagens">
      <pattern>
        <pattern-item n="ngen_time_meas"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="timemeas"/></tag>
              <tag><clip pos="1" side="tl" part="tags"/></tag>
            </tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ NGEN_TIME_MEAS: flere års => fleire års">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="ngen_time_meas"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="timemeas"/></tag>
              <tag><clip pos="2" side="tl" part="tags"/></tag>
            </tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- N+ -->
    <rule comment="N">
      <pattern>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="stash_case_in_ntags"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="n" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="NCMP N: ytelse ytelse => ytingsyting
                   Remove the space that pretransfer added">
      <pattern>
        <pattern-item n="ncmp"/>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="1"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="2"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="2"/></call-macro>
        <out>
          <chunk name="n_n" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="NCMP NCMP N: Falk lands krigen => Falklandskrigen">
      <pattern>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="1"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="2"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="3"/></call-macro>
        <out>
          <chunk name="n_n_n" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="NCMP NCMP NCMP N">
      <pattern>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="1"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="2"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="3"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="4"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="3"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="4"/></call-macro>
        <out>
          <chunk name="n_n_n_n" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- N og N: -->
    <rule comment="CNJCOO_NKON
                   Just drop the @-tag">
      <pattern>
        <pattern-item n="cnjcoo_nkon"/>
      </pattern>
      <action>
        <out>
          <chunk name="default">
            <tags>
              <tag><clip pos="1" side="tl" part="tags"/></tag>
            </tags>
            <lu><clip pos="1" side="tl" part="lemh"/><lit-tag v="cnjcoo"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="NIND CNJCOO NIND: (kvinners) stemme og deltakelse → stemma og deltakinga til kvinner
                   Chunk the coordination for genitive-movement in t2x">
      <!-- TODO: avoid «landets ambassader og konsulater i utlandet» -->
      <pattern>
        <pattern-item n="nind_indsplit"/>
        <pattern-item n="cnjcoo_nkon"/>
        <pattern-item n="nind_indsplit"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="n_cnjcoo_n" case="caseFirstWord">
            <tags>
              <tag><clip pos="3" side="tl" part="tags"/></tag>
            </tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="lemh"/><lit-tag v="cnjcoo"/></lu>
            <b pos="2"/>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="NIND CNJCOO NCMP N: (kvinners) kontroll- og konstitusjonskomité → kontroll- og konstitusjonskomitéen til kvinner
                   Chunk the coordination for genitive-movement in t2x">
      <pattern>
        <pattern-item n="nind_indsplit"/>
        <pattern-item n="cnjcoo_nkon"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="n_cnjcoo_n_n" case="caseFirstWord">
            <tags>
              <tag><clip pos="4" side="tl" part="tags"/></tag>
            </tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="lemh"/><lit-tag v="cnjcoo"/></lu>
            <b pos="2"/>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- ADJ N+ -->
    <rule comment="ADJ N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="2"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="2"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ NCMP N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj_n_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="2"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="3"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="3"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ NCMP NCMP N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj_n_n_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="2"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="3"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="4"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="4"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ NCMP NCMP NCMP N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj_n_n_n_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="5"/><with-param pos="1"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="2"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="3"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="4"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="5"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="5"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
            <lu><clip pos="5" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- ADJ ADJ N+ -->
    <rule comment="ADJ ADJ N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj_adj_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="set_gender2.n.adj"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="set_grau_aux2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="3"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="3"/></call-macro>
        <choose><when>
          <!-- set_grau_aux2 may have removed the first adj: -->
          <test><equal><clip pos="1" side="tl" part="whole"/><lit v=""/></equal></test>
          <let><var n="c_name"/><lit v="adj_n"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="tags"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ ADJ NCMP N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj_adj_n_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <call-macro n="set_gender2.n.adj"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <call-macro n="set_grau_aux2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="3"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="4"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="4"/></call-macro>
        <choose><when>
          <!-- set_grau_aux2 may have removed the first adj: -->
          <test><equal><clip pos="1" side="tl" part="whole"/><lit v=""/></equal></test>
          <let><var n="c_name"/><lit v="adj_n_n"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="tags"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ ADJ NCMP NCMP N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj_adj_n_n_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="5"/><with-param pos="1"/></call-macro>
        <call-macro n="set_gender2.n.adj"><with-param pos="5"/><with-param pos="2"/></call-macro>
        <call-macro n="set_grau_aux2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="3"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="4"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="5"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="5"/></call-macro>
        <choose><when>
          <!-- set_grau_aux2 may have removed the first adj: -->
          <test><equal><clip pos="1" side="tl" part="whole"/><lit v=""/></equal></test>
          <let><var n="c_name"/><lit v="adj_n_n_n"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="tags"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
            <lu><clip pos="5" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ ADJ NCMP NCMP NCMP N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n_np"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj_adj_n_n_n_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="6"/><with-param pos="1"/></call-macro>
        <call-macro n="set_gender2.n.adj"><with-param pos="6"/><with-param pos="2"/></call-macro>
        <call-macro n="set_grau_aux2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="3"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="4"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="5"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="6"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="6"/></call-macro>
        <choose><when>
          <!-- set_grau_aux2 may have removed the first adj: -->
          <test><equal><clip pos="1" side="tl" part="whole"/><lit v=""/></equal></test>
          <let><var n="c_name"/><lit v="adj_n_n_n_n"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="tags"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
            <lu><clip pos="5" side="tl" part="whole"/></lu>
            <lu><clip pos="6" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- ADJ, no noun -->
    <rule comment="ADJ">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj"/></let>
        <call-macro n="set_gender1.adj"><with-param pos="1"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ ADJ">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj_adj"/></let>
        <call-macro n="set_gender1.adj"><with-param pos="1"/></call-macro>
        <call-macro n="set_gender1.adj"><with-param pos="2"/></call-macro>
        <call-macro n="set_grau_aux2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <choose><when>
          <!-- set_grau_aux2 may have removed the first adj: -->
          <test><equal><clip pos="1" side="tl" part="whole"/><lit v=""/></equal></test>
          <let><var n="c_name"/><lit v="adj"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="2" side="tl" part="tags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="tags"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- Other classes -->
    <rule comment="DET">
      <pattern>
        <pattern-item n="det"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test><in caseless="yes"><clip pos="1" side="sl" part="lem"/><list n="det_indef"/></in></test>
            <let><var n="c_name"/><lit v="detdd"/></let>
          </when>
          <when>
            <test><equal caseless="yes"><clip pos="1" side="tl" part="lemh"/><lit v="sig"/></equal></test>
            <let><var n="c_name"/><lit v="detsin"/></let>
          </when>
          <otherwise><let><var n="c_name"/><lit v="det"/></let></otherwise>
        </choose>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="a_date"/><lit v=""/></let>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="PRN">
      <pattern>
        <pattern-item n="prn"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="prn" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="CM">
      <pattern>
        <pattern-item n="cm"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="cm" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="CNJSUB-AT">
      <pattern>
        <pattern-item n="cnjsub-at"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="cnjsub-at" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="DETQNT REMSPC: remove space inserted by pretransfer">
      <pattern>
        <pattern-item n="detqnt"/>
        <pattern-item n="remspc"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><clip pos="2" side="tl" part="a_remspc"/><lit v=""/></let>
        <out>
          <chunk name="det" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
          <chunk name="default" case="caseFirstWord">
            <tags><tag><clip pos="2" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

  </section-rules>
</transfer>

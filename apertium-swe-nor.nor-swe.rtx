! nor-swe.rtx

!!!!!!!!!!!!!!!!!!!!!!!!!
! Attribute Categories: !
!!!!!!!!!!!!!!!!!!!!!!!!!

gender = m f nt ut un fn mf GD ;
! TODO do I need non_overwritable_gender = … @mf ;
gender_adj_sg_ind = nt ut ;
number = sg pl sp ND ;
defnes = def ind ;
tense = inf pret pres pp supn imp ;
person = (PD p3) p1 p2 p3 PD ;
voice = (VD actv) pasv actv ;
a_adj = sint ord pp pprs ;
a_cmp = cmp ;
a_det = dem qnt pos emph ;
a_neg = neg ;
a_comp = pst comp sup ;
a_clb = clb ;

! Word sets:
w_paux = bli være vara vara¹ ;

! nouns for which we use the 'm' form of adj's (tl/swe lemmas)
w_noun_use_masc_adj = anhängare användare arvinge befälhavare beskyddare bror chef domare forskare företrädare granne Gud gud gudom hövding invånare katolik kejsare konung krigare kung ledare länd makthavare man medarbetare muslim människa person plattform polischef profet religion representant rådgivare skarprättare släkting son spelare storhertig teoretiker tsar vårdare zoolog ämbetsman ärkebiskop överlevande
      ! vän ! seems like they use -a at least as often for this one?
      ;

!!!!!!!!!!!!!!!!!!!!!!
! Tag Rewrite Rules: !
!!!!!!!!!!!!!!!!!!!!!!

tense > tense : pret past ;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Tag Order (Output Patterns): !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

adj:   _.a_adj.a_comp.gender.number.defnes.a_cmp;
n:     _.gender.number.defnes.a_cmp;
det:   _.a_det.gender.number;
vblex: _.tense.voice;
pr:    _;
adv:   _.a_comp;
ij:    _;
cnjsub: _;
cnjcoo: _;
part:   _;
sent:   _.a_clb;

! Note: attrs not included here are not available to reduction rules
N:     _.gender.number.defnes.a_cmp;
A:     _.a_adj.a_comp.gender.number.defnes.a_cmp;
NP:    _.gender.number.defnes;
DP:    _.gender.number.defnes;
PP:    _;
VP:    _.tense.number.voice;
ADV:   _;
SENT:  _;
! TODO: Put gender/number on VP for pp-samsvar stuff?


!!!!!!!!!!!!!!!!!!!!
! Reduction Rules: !
!!!!!!!!!!!!!!!!!!!!

N -> %n         { %1[lemcase=$lemcase] }
   | n.*.cmp %N { 1[lemcase=$lemcase] %2 }
   ;


! A gender:
! - if pst and ND/GD: pl/un
! - if sup and GD: fn
! A N gender:
! - if NOT adj.un and adj.GD OR n.gen/sl != n.gen/tl:
!   - if sg and ind and n.lemh!=första and n.ut/n.nt: adj.gen=n.gen
!   - if sg/sp and def/första:
!     - if n.ut and noun-use-masc-adj: adj.gen=m
!     - if n.nt: adj.gen=fn

A -> "A->adj"       %adj { %1[gender=(if (1.a_comp = pst and 1.gender = GD) un el-if (1.a_comp = sup and 1.gender = GD) fn else $gender),
                              number=(if (1.a_comp = pst and 1.number = ND) pl else $number)] }
   | "A->n+A" n.*.cmp %A { 1 %2 }
   ;

! TODO: Stop <sint> getting copied from sl side if not in tl side!
! <popcorndude> if you specify a side it takes that side or empty, if you don't specify a side it tries tl->ref->sl  [15:41]
! ^nøye<adj><sint><pst><nt><sg><ind>/noga<adj><pst><nt><sg><ind>$
! should not get sint!


NP ->   %N { %1[lemcase=$lemcase] }
    | "ANun" 4: A.*.un %N
       ! Forms with <un> on the swe side of bidix don't inflect for gender
       { 1 _ %2 }
    | "ANnoch" 4: A %N
       ?(2.gender/sl = 2.gender/tl and (1.gender not = GD))
       ! Gender didn't change in bidix
       { 1 _ %2 }
    ! sg/sp and def/första takes fn if noun is nt, m only for certain nouns
    | "ANutsg" 2: A.*.sg.def    %N.ut ?(2.lemh/tl in w_noun_use_masc_adj) { 1[gender=m] _ %2 }
    | "ANutsp" 2: A.*.sp.def    %N.ut ?(2.lemh/tl in w_noun_use_masc_adj) { 1[gender=m] _ %2 }
    | "ANutfö" 3: första@A.*.sg %N.ut ?(2.lemh/tl in w_noun_use_masc_adj) { 1[gender=m] _ %2 }
    | "ANntfö" 3: första@A.*.sg %N.nt { 1[gender=nt] _                                    %2 }
    | "ANntsg" 2: A.*.sg.def    %N.nt { 1[gender=nt] _                                    %2 }
    | "ANntsp" 2: A.*.sp.def    %N.nt { 1[gender=nt] _                                    %2 }
    ! sg.ind takes noun gender if that's nt, ut (and adj isn't första):
    | "ANnt2N" 2: A.*.sg.ind    %N.nt { 1[gender=2.gender] _                              %2 }
    | "ANut2N" 2: A.*.sg.ind    %N.ut { 1[gender=2.gender] _                              %2 }
    | "AN0"    0: A             %N { 1 _                                                  %2 }
    ;

PP -> pr %DP { 1 _ 2 } ;

DP -> det %NP
      { 1[gender=(if (2.number = pl) un else 2.gender), number=2.number] _ 2 }
    | "n.def det ~> det n.ind"
      %NP det.pos
      { 2[gender=(if (1.number = pl) un else 1.gender), number=1.number, lemcase=1.lemcase]
        _
        1[defnes=ind, lemcase=2.lemcase]
      }
      ;

! TODO: Do any tags need propagating here?
ADV -> "ADV" %adv { %1 }
    | "ADV.nt" %A.*.nt { %1 }
    ;

VP ->
      2: %vblex.imp { 1[voice=""] }
    | %vblex { 1 }
    !   %vblex DP { 1[tense=$tense, person=$person, number=$number] _ 2 }
    ! | adv %VP (if (1.lem/sl = there)
    !               { %2 }
    !            else
    !               { 1 _ %2 } )
    ! | PP %VP { 1 _ %2 }
    ! |
    | "er hardt rammet ~> drabbats hårt"
      %vblex ADV vblex.pp
      ! Would prefer to do %[w_paux]@vblex but
      ! https://github.com/apertium/apertium-recursive/issues/75
      ?(1.lemh/tl IsSubstring vara or 1.lemh/tl = bli )
      { 3[voice = pasv] _ 2 }
    | "rm att"
      %vblex.*.pasv part ha@vblex vblex.pp
      { 1 _ 3 _ 4 }
    ;

! If bidix removed clb, ensure it stays removed:
SENT -> %sent { %1[a_clb = 1.a_clb/tl] } ;
